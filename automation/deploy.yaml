---
 - name: Play_1
   hosts: localhost
   become: true
   tasks:

   # installation steps for helm
   - name: Check if helm application is installed
     command: "which helm"
     register: helm_application_check
     ignore_errors: true
     tags:
       - helm

   - name: Print helm debug message
     debug:
       var: helm_application_check
     tags:
       - helm

   - name: Install helm application
     shell: curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && chmod 700 get_helm.sh && ./get_helm.sh
     when: helm_application_check.rc != 0
     register: helm
     tags:
       - helm

   - name: Print helm debug message
     debug:
       var: helm
     tags:
       - helm

# installation steps for calico

   - name: Check if calico application is installed
     shell: kubectl get ns  calico-system 
     register: calico_application_check
     ignore_errors: true
     tags:
       - calico

   - name: Print calico debug message
     debug:
       var: calico_application_check
     tags:
       - calico


   - name: Install calico application
     shell: |
            kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/tigera-operator.yaml
            kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.26.1/manifests/custom-resources.yaml
     when: calico_application_check.rc != 0
     register: calico
     ignore_errors: true
     tags:
       - calico

   - name: Print calico  debug message
     debug:
       var: calico
     tags:
       - calico

# installation steps for istio

   - name: Check if istio application is installed
     shell: kubectl get ns istio-system
     register: istio_application_check
     ignore_errors: true
     tags:
       - istio

   - name: Print istio debug message
     debug:
       var: istio_application_check
     tags:
       - istio

   - name: Install istio application
     shell: |
            curl -L https://istio.io/downloadIstio | sh - && chmod -R 777 istio-[0-9.]* && mv istio-[0-9.]*/bin/istioctl /usr/local/bin/
            istioctl install --set profile=demo -y
            # kubectl label namespace default istio-injection=enabled
     register: istio
     when:  istio_application_check.rc != 0
     ignore_errors: true
     tags:
       - istio

   - name: Print istio debug message
     debug:
       var: istio
     tags:
       - istio

# installation steps for argocd

   - name: Check if argocd application is installed
     shell: kubectl get ns argocd 
     register: argocd_application_check
     ignore_errors: true
     tags:
       - argocd

   - name: Print argocd debug message
     debug:
       var: argocd_application_check
     tags:
       - argocd

   - name: Install argocd application
     shell: |
            kubectl create namespace argocd
            kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml
            curl -sSL -o argocd-linux-amd64 https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
            sudo install -m 555 argocd-linux-amd64 /usr/local/bin/argocd
            rm argocd-linux-amd64
            kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
     register: argocd
     when: argocd_application_check.rc != 0
     ignore_errors: true
     tags:
       - argocd

   - name: Print argocd debug message
     debug:
       var: argocd
     tags:
       - argocd

   - name:  argocd application initial admin user password
     shell: argocd admin initial-password -n argocd
     register: argocd_password
     #when: argocd_application_check.rc != 0
     ignore_errors: true
     tags:
       - argocd_password

   - name: Print argocd debug message
     debug:
       var: argocd_password
     tags:
       - argocd_password
 
   
            
# installation steps for k8s dashboard

   - name: Check if k8sdashboard application is installed
     shell: kubectl get ns | grep -i kubernetes-dashboard 
     register: k8sdashboard_application_check
     ignore_errors: true
     tags:
       - k8sdashboard

   - name: Print k8sdashboard debug message
     debug:
       var: k8sdashboard_application_check
     tags:
       - k8sdashboard

   - name: Install k8sdashboard application
     shell: |
            kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.6.1/aio/deploy/recommended.yaml
            sleep=5
            cat >serviceaccount.yaml <<EOF
            ---
            apiVersion: v1
            kind: ServiceAccount
            metadata:
              name: admin-user
              namespace: kube-system
            ---
            apiVersion: rbac.authorization.k8s.io/v1
            kind: ClusterRoleBinding
            metadata:
              name: admin-user
            roleRef:
              apiGroup: rbac.authorization.k8s.io
              kind: ClusterRole
              name: cluster-admin
            subjects:
            - kind: ServiceAccount
              name: admin-user
              namespace: kube-system
            EOF
            kubectl apply -f serviceaccount.yaml
            kubectl patch svc kubernetes-dashboard -n kubernetes-dashboard -p '{"spec": {"type": "NodePort"}}'
            sleep=3
     register: k8sdashboard
     when:  k8sdashboard_application_check.rc != 0 #or k8sdashboard_application_check.rc == 0  
     ignore_errors: true
     tags:
       - k8sdashboard

   - name: Print k8sdashboard debug message
     debug:
       var: k8sdashboard
     tags:
       - k8sdashboard

   - name:  k8sdashboard token
     shell: kubectl -n kube-system create token admin-user
     register: k8sdashboard_token
     ignore_errors: true
     tags:
       - k8sdashboard_token

   - name: Print k8sdashboard_token debug message
     debug:
       var: k8sdashboard_token
     tags:
       - k8sdashboard_token

# installation steps for keda

   - name: Check if keda application is installed
     shell: kubectl get ns keda
     register: keda_application_check
     ignore_errors: true
     tags:
       - keda

   - name: Print keda debug message
     debug:
       var: keda_application_check
     tags:
       - keda

   - name: Install keda application
     shell: |
            helm repo add kedacore https://kedacore.github.io/charts
            helm repo update
            helm install keda kedacore/keda --namespace keda --create-namespace
     register: keda
     when:  keda_application_check.rc != 0 #or keda_application_check.rc == 0
     ignore_errors: true
     tags:
       - keda

   - name: Print keda debug message
     debug:
       var: keda
     tags:
       - keda

# installation steps for keycloak

   - name: Check if keycloak application is installed
     shell: kubectl get deploy | grep -i keycloak
     register: keycloak_application_check
     ignore_errors: true
     tags:
       - keycloak

   - name: Print keycloak debug message
     debug:
       var: keycloak_application_check
     tags:
       - keycloak

   - name: Install keycloak application
   #change image version to latest
     shell: |
            kubectl create -f https://raw.githubusercontent.com/keycloak/keycloak-quickstarts/latest/kubernetes/keycloak.yaml
            kubectl patch deployment keycloak -p '{"spec": {"template": {"spec": {"containers": [{"name": "keycloak", "image": "quay.io/keycloak/keycloak:22.0.1"}]}}}}'   
     register: keycloak
     when:  keycloak_application_check.rc != 0 #or keycloak_application_check.rc == 0 
     ignore_errors: true
     tags:
       - keycloak

   - name: Print keycloak debug message
     debug:
       var: keycloak
     tags:
       - keycloak

# installation steps for prometheus

   - name: Check if prometheus application is installed
     shell: kubectl get ns | grep -i monitoring 
     register: prometheus_application_check
     ignore_errors: true
     tags:
       - prometheus

   - name: Print prometheus debug message
     debug:
       var: prometheus_application_check
     tags:
       - prometheus

   - name: Install prometheus application
     shell: |
            git clone https://github.com/prometheus-operator/kube-prometheus.git
            kubectl create -f kube-prometheus/manifests/setup
            kubectl create -f kube-prometheus/manifests/
            kubectl -n monitoring delete networkpolicies.networking.k8s.io --all
            kubectl --namespace monitoring patch svc prometheus-k8s -p '{"spec": {"type": "NodePort"}}'
            kubectl --namespace monitoring patch svc grafana -p '{"spec": {"type": "NodePort"}}'
     register: prometheus
     when: prometheus_application_check.rc != 0  #or prometheus_application_check.rc == 0 
     ignore_errors: true
     tags:
       - prometheus

   - name: Print prometheus debug message
     debug:
       var: prometheus
     tags:
       - prometheus

 #installation steps for kubescape

   - name: Check if kubescape application is installed
     shell: which kubescape
     ignore_errors: true
     register: kubescape_application_check
     tags:
       - kubescape

   - name: Print kubescape debug message
     debug:
       var: kubescape_application_check
     tags:
       - kubescape

   - name: Install kubescape application
     shell: |
            curl -s https://raw.githubusercontent.com/kubescape/kubescape/master/install.sh | /bin/bash
            kubescape scan --create-account

     register: kubescape
     when:  kubescape_application_check.rc != 0  #or kubescape_application_check.rc == 0 
     ignore_errors: true
     tags:
       - kubescape

   - name: Print kubescape debug message
     debug:
       var: kubescape
     tags:
       - kubescape
  
 #installation steps for k9s

   - name: Check if k9s application is installed
     shell: which k9s
     ignore_errors: true
     register: k9s_application_check
     tags:
       - k9s

   - name: Print k9s debug message
     debug:
       var: k9s_application_check
     tags:
       - k9s

   - name: Install k9s application  #replace latest k9s version
     shell: |
            mkdir k9s
            cd k9s
            wget https://github.com/derailed/k9s/releases/download/v0.27.4/k9s_Linux_amd64.tar.gz
            tar -xvf k9s_Linux_amd64.tar.gz   
            sudo mv k9s /usr/local/bin
            sudo chmod +x /usr/local/bin/k9s
            cd ..
     register: k9s
     when:  k9s_application_check.rc != 0  
     ignore_errors: true
     tags:
       - k9s

   - name: Print k9s debug message
     debug:
       var: k9s
     tags:
       - k9s

  #installation steps for jaeger

   - name: Check if jaeger application is installed
     shell: kubectl get pods -n istio-system  | grep -i jaeger
     register: jaeger_application_check
     ignore_errors: true
     tags:
       - jaeger

   - name: Print jaeger debug message
     debug:
       var: jaeger_application_check
     tags:
       - jaeger

   - name: Installing jaeger
     shell: |
            kubectl apply -f https://raw.githubusercontent.com/istio/istio/release-1.18/samples/addons/jaeger.yaml
            kubectl patch svc tracing -n istio-system  -p '{"spec": {"type": "NodePort"}}'           
     register: jaeger
     when: jaeger_application_check.rc != 0
     ignore_errors: true
     tags:
       - jaeger
  
   - name: Print jaeger debug message
     debug:
       var: jaeger
     tags:
       - jaeger

  #installation steps for open5g

   - name: Check if open5g application is installed
     shell: helm ls | grep -i open5gs
     register: open5g_application_check
     ignore_errors: true
     tags:
       - open5g

   - name: Print open5g debug message
     debug:
       var: open5g_application_check
     tags:
       - open5g

   - name: Install open5g application
     shell: |
            helm repo add openverso https://gradiant.github.io/openverso-charts/
            helm install open5gs openverso/open5gs --version 2.0.8 --values https://gradiant.github.io/openverso-charts/docs/open5gs-ueransim-gnb/5gSA-values.yaml
            helm install ueransim-gnb openverso/ueransim-gnb --version 0.2.2 --values https://gradiant.github.io/openverso-charts/docs/open5gs-ueransim-gnb/gnb-ues-values.yaml

     register: open5g
     when:  open5g_application_check.rc != 0 # or open5g_application_check.rc == 0 
     ignore_errors: true
     tags:
       - open5g

   - name: Print open5g debug message
     debug:
       var: open5g
     tags:
       - open5g


